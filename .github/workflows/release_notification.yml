name: Release Notification

on:
  release:
    types: [prereleased]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Get Release Information
        id: get_release_info
        run: |
          RELEASE_BODY=$(echo "${{ github.event.release.body }}" | tr '\n' ' ')
          
          echo "RELEASE_ID=${{ github.event.release.id }}" >> $GITHUB_ENV
          echo "RELEASE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          echo "RELEASE_NAME=${{ github.event.release.name }}" >> $GITHUB_ENV
          echo "RELEASE_IS_PRERELEASE=${{ github.event.release.prerelease }}" >> $GITHUB_ENV
          echo "RELEASE_URL=${{ github.event.release.html_url }}" >> $GITHUB_ENV
          echo "RELEASE_BODY=$RELEASE_BODY" >> $GITHUB_ENV
          echo "REPOSITORY_OWNER=${{ github.repository_owner }}" >> $GITHUB_ENV
          echo "REPOSITORY_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV

      - name: Download Release Asset
        id: download_asset
        run: |
          GITHUB_API_URL="https://api.github.com/repos/${{ env.REPOSITORY_OWNER }}/${{ env.REPOSITORY_NAME }}/releases/${{ env.RELEASE_ID }}/assets"
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$GITHUB_API_URL")

          # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –≤–∞–ª—ñ–¥–Ω–∏–π JSON
          if echo "$RESPONSE" | jq empty 2>/dev/null; then
            echo "GitHub API returned a valid response."
          else
            echo "GitHub API returned an error: $RESPONSE"
            exit 1
          fi

          ASSET_URL=$(echo "$RESPONSE" | jq -r '.[] | select(.name | endswith(".apk")) | .browser_download_url')
          ASSET_NAME=$(echo "$RESPONSE" | jq -r '.[] | select(.name | endswith(".apk")) | .name')

          if [ -n "$ASSET_URL" ] && [ "$ASSET_URL" != "null" ]; then
            echo "ASSET_URL=$ASSET_URL" >> $GITHUB_ENV
            echo "ASSET_NAME=$ASSET_NAME" >> $GITHUB_ENV
            curl -L -o "$ASSET_NAME" "$ASSET_URL"
          else
            echo "No APK asset found in this release."
            echo "SKIP_TELEGRAM_ZIP=true" >> $GITHUB_ENV
          fi

      - name: Zip Downloaded Asset
        if: env.SKIP_TELEGRAM_ZIP != 'true'
        run: |
          if [ -n "$ASSET_NAME" ]; then
            ZIP_FILE="${ASSET_NAME%.apk}.zip"
            zip "$ZIP_FILE" "$ASSET_NAME"
            echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV
          fi

      - name: Telegram Notification
        run: |
          RELEASE_STATUS="Pre-release"
          MESSAGE="**–ù–æ–≤–∏–π —Ä–µ–ª—ñ–∑ RaiderHub: $RELEASE_NAME ($RELEASE_STATUS)**\n\n"
          MESSAGE+="**–¢–µ–≥:** \`$RELEASE_TAG\`\n\n"
          MESSAGE+="**–ó–º—ñ–Ω–∏:**\n$RELEASE_BODY\n\n"
          MESSAGE+="**[üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–µ–ª—ñ–∑]($RELEASE_URL)**"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TG_CHAT_ID }}" \
            -d text="$MESSAGE" \
            -d parse_mode="MarkdownV2" \
            -d disable_web_page_preview=true

      - name: Send Zip to Telegram
        if: env.SKIP_TELEGRAM_ZIP != 'true'
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendDocument" \
            -F chat_id="${{ secrets.TG_CHAT_ID }}" \
            -F document="@$ZIP_FILE"

      - name: Discord Notification
        run: |
          RELEASE_STATUS="Pre-release"
          MESSAGE="**–ù–æ–≤–∏–π —Ä–µ–ª—ñ–∑ RaiderHub: $RELEASE_NAME ($RELEASE_STATUS)**\n\n"
          MESSAGE+="**–¢–µ–≥:** \`$RELEASE_TAG\`\n\n"
          MESSAGE+="**–ó–º—ñ–Ω–∏:**\n$RELEASE_BODY\n\n"
          MESSAGE+="**[üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–µ–ª—ñ–∑]($RELEASE_URL)**"

          curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"$MESSAGE\"}" "${{ secrets.DISCORD_WEBHOOK_URL }}"
