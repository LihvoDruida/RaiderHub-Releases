name: Release Notification

on:
  release:
    types: [published, prereleased]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Get Release Information
        id: get_release_info
        run: |
          echo "RELEASE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          echo "RELEASE_NAME=${{ github.event.release.name }}" >> $GITHUB_ENV
          echo "RELEASE_IS_PRERELEASE=${{ github.event.release.prerelease }}" >> $GITHUB_ENV
          echo "RELEASE_URL=${{ github.event.release.html_url }}" >> $GITHUB_ENV
          echo "RELEASE_BODY=${{ github.event.release.body }}" >> $GITHUB_ENV
          echo "REPOSITORY_OWNER=${{ github.repository_owner }}" >> $GITHUB_ENV
          echo "REPOSITORY_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
          echo "RELEASE_ID=${{ github.event.release.id }}" >> $GITHUB_ENV

      - name: Download Release Asset
        id: download_asset
        run: |
          GITHUB_API_URL="https://api.github.com/repos/${{ env.REPOSITORY_OWNER }}/${{ env.REPOSITORY_NAME }}/releases/${{ env.RELEASE_ID }}/assets"
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$GITHUB_API_URL")
          APK_ASSET=$(echo "$RESPONSE" | jq -r '.[] | select(.name | endswith(".apk")) | {name: .name, url: .browser_download_url}')
          ASSET_URL=$(echo "$APK_ASSET" | jq -r '.url')
          ASSET_NAME=$(echo "$APK_ASSET" | jq -r '.name')
          
          if [ "$ASSET_URL" != "null" ]; then
            echo "ASSET_URL=$ASSET_URL" >> $GITHUB_ENV
            echo "ASSET_NAME=$ASSET_NAME" >> $GITHUB_ENV
            curl -L -o "$ASSET_NAME" "$ASSET_URL"
          else
            echo "No APK asset found in this release."
            echo "SKIP_TELEGRAM_ZIP=true" >> $GITHUB_ENV
          fi

      - name: Zip Downloaded Asset
        if: env.SKIP_TELEGRAM_ZIP != 'true' && env.ASSET_NAME
        run: |
          ZIP_FILE="${ASSET_NAME%.apk}.zip"
          zip "$ZIP_FILE" "$ASSET_NAME"
          echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV

      - name: Telegram File Attachment (надсилання ZIP)
        if: env.SKIP_TELEGRAM_ZIP != 'true' && env.ZIP_FILE
        run: |
          RELEASE_STATUS="Release"
          if [ "$RELEASE_IS_PRERELEASE" == "true" ]; then
            RELEASE_STATUS="Pre-release"
          fi
          CAPTION="Новий реліз RaiderHub: $RELEASE_NAME ($RELEASE_STATUS)"
          curl -v "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendDocument" \
            -F chat_id=${{ secrets.TG_CHAT_ID }} \
            -F document="@$ZIP_FILE" \
            -F caption="$CAPTION" \
            -F disable_notification=true || exit 1
          echo "TELEGRAM_SENT_ZIP=true" >> $GITHUB_ENV

      - name: Telegram Notification (надсилання посилання, якщо не вдалося ZIP або це Pre-release)
        if: env.SKIP_TELEGRAM_ZIP == 'true' || env.TELEGRAM_SENT_ZIP != 'true'
        run: |
          RELEASE_STATUS="Release"
          if [ "$RELEASE_IS_PRERELEASE" == "true" ]; then
            RELEASE_STATUS="Pre-release"
          fi
          MESSAGE="Новий реліз RaiderHub: $RELEASE_NAME ($RELEASE_STATUS)\n\nТег: $RELEASE_TAG\n\nЗміни:\n$RELEASE_BODY\n\nПосилання: $RELEASE_URL"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TG_CHAT_ID }}" \
            -d text="$MESSAGE" \
            -d disable_web_page_preview=true

      - name: Discord Notification
        run: |
          RELEASE_STATUS="Release"
          if [ "$RELEASE_IS_PRERELEASE" == "true" ]; then
            RELEASE_STATUS="Pre-release"
          fi
          MESSAGE="Новий реліз RaiderHub: $RELEASE_NAME ($RELEASE_STATUS)\n\nТег: $RELEASE_TAG\n\nЗміни:\n$RELEASE_BODY\n\nПосилання: $RELEASE_URL"
          curl -H "Content-Type: application/json" -X POST -d '{"content": "'"$MESSAGE"'"}' ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Clean Up Downloaded Asset
        if: env.ASSET_NAME
        run: rm -f "$ASSET_NAME" "${ASSET_NAME%.apk}.zip"
