name: Release Notification

on:
  release:
    types: [prereleased]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Get Release Information
        id: get_release_info
        run: |
          # üîπ –ß–∏—Å—Ç–∫–∞ –≤—ñ–¥ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤:
          # - –≤–∏–¥–∞–ª—è—î–º–æ –∑–≤–æ—Ä–æ—Ç–Ω—ñ –ª–∞–ø–∫–∏ ` (–±–æ –ª–∞–º–∞—é—Ç—å bash —ñ HTML)
          # - –∑–∞–º—ñ–Ω—é—î–º–æ —Ç–∞–±–∏ –Ω–∞ –ø—Ä–æ–±—ñ–ª–∏
          # - –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –ø–æ–¥–≤—ñ–π–Ω—ñ –ª–∞–ø–∫–∏
          CLEAN_RW=$(cat <<'EOF'
          ${{ github.event.release.body }}
          EOF
          )
          CLEAN_BODY=$(echo "$CLEAN_RW" \
            | tr -d '\r' \
            | sed 's/`//g' \
            | sed 's/\t/    /g' \
            | sed 's/"/\\"/g')

          # Escape –¥–ª—è Telegram (HTML mode)
          TELEGRAM_BODY=$(echo "$CLEAN_BODY" \
            | sed 's/&/\&amp;/g' \
            | sed 's/</\&lt;/g' \
            | sed 's/>/\&gt;/g')

          {
            echo "RELEASE_ID=${{ github.event.release.id }}"
            echo "RELEASE_TAG=${{ github.event.release.tag_name }}"
            echo "RELEASE_NAME=${{ github.event.release.name }}"
            echo "RELEASE_IS_PRERELEASE=${{ github.event.release.prerelease }}"
            echo "RELEASE_URL=${{ github.event.release.html_url }}"
            echo "REPOSITORY_OWNER=${{ github.repository_owner }}"
            echo "REPOSITORY_NAME=${{ github.event.repository.name }}"
            printf 'RELEASE_BODY_TELEGRAM<<EOF\n%s\nEOF\n' "$TELEGRAM_BODY"
            printf 'RELEASE_BODY_DISCORD<<EOF\n%s\nEOF\n' "$DISCORD_BODY"
          } >> $GITHUB_ENV
          
      - name: Download Release Asset
        id: download_asset
        run: |
          GITHUB_API_URL="https://api.github.com/repos/${{ env.REPOSITORY_OWNER }}/${{ env.REPOSITORY_NAME }}/releases/${{ env.RELEASE_ID }}/assets"
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$GITHUB_API_URL")

          # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –≤–∞–ª—ñ–¥–Ω–∏–π JSON
          if echo "$RESPONSE" | jq empty 2>/dev/null; then
            echo "GitHub API returned a valid response."
          else
            echo "GitHub API returned an error: $RESPONSE"
            exit 1
          fi

          ASSET_URL=$(echo "$RESPONSE" | jq -r '.[] | select(.name | endswith(".apk")) | .browser_download_url')
          ASSET_NAME=$(echo "$RESPONSE" | jq -r '.[] | select(.name | endswith(".apk")) | .name')

          if [ -n "$ASSET_URL" ] && [ "$ASSET_URL" != "null" ]; then
            echo "ASSET_URL=$ASSET_URL" >> $GITHUB_ENV
            echo "ASSET_NAME=$ASSET_NAME" >> $GITHUB_ENV
            curl -L -o "$ASSET_NAME" "$ASSET_URL"
          else
            echo "No APK asset found in this release."
            echo "SKIP_TELEGRAM_ZIP=true" >> $GITHUB_ENV
          fi

      - name: Zip Downloaded Asset
        if: env.SKIP_TELEGRAM_ZIP != 'true'
        run: |
          if [ -n "$ASSET_NAME" ]; then
            ZIP_FILE="${ASSET_NAME%.apk}.zip"
            zip "$ZIP_FILE" "$ASSET_NAME"
            echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV
          fi

      - name: Telegram Notification (–Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è ZIP –∞–±–æ —Ü–µ Pre-release)
        if: env.SKIP_TELEGRAM_ZIP != 'true'
        id: telegram_notification_link
        run: |
          RELEASE_STATUS="Pre-release"
          MESSAGE_RAW="<b>–ù–æ–≤–∏–π —Ä–µ–ª—ñ–∑ RaiderHub (${RELEASE_STATUS})</b>\n\n"
          MESSAGE_RAW+="<b>–¢–µ–≥:</b> <code>${{ env.RELEASE_TAG }}</code>\n\n"
          MESSAGE_RAW+="<b>–ó–º—ñ–Ω–∏:</b>\n${{ env.RELEASE_BODY_TELEGRAM }}\n\n"
          MESSAGE_RAW+="<a href='${{ env.RELEASE_URL }}'>üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–µ–ª—ñ–∑</a>"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TG_CHAT_ID }}" \
            -d message_thread_id="${{ secrets.TG_CHAT_THREAD_ID }}" \
            -d text="$MESSAGE_RAW" \
            -d parse_mode="HTML" \
            -d disable_web_page_preview=true
          echo "TELEGRAM_SENT_LINK=true" >> $GITHUB_ENV

      - name: Send Zip to Telegram
        if: env.SKIP_TELEGRAM_ZIP != 'true'
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendDocument" \
            -F chat_id="${{ secrets.TG_CHAT_ID }}" \
            -F message_thread_id="${{ secrets.TG_CHAT_THREAD_ID }}" \
            -F document="@$ZIP_FILE"

      - name: Discord Notification
        run: |
          RELEASE_STATUS="Pre-release"

          # –û–±—Ä–æ–±–∫–∞ —Ç—ñ–ª–∞ —Ä–µ–ª—ñ–∑—É.
          # –ó–∞–º—ñ–Ω—é—î–º–æ –∑–≤–æ—Ä–æ—Ç–Ω—ñ –ª–∞–ø–∫–∏, —è–∫—ñ –º–æ–∂—É—Ç—å –ª–∞–º–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ç–∫—É.
          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –ø–µ—Ä–µ–Ω–æ—Å–∏ —Ä—è–¥–∫—ñ–≤.
          DISCORD_BODY_CLEANED=$(echo "$RAW_BODY" \
            | tr -d '\r' \
            | sed 's/`//g' \
            | sed 's/\t/    /g' \
            | sed 's/"/\\"/g' \
            | sed 's/&/\&amp;/g' \
            | sed 's/</\&lt;/g' \
            | sed 's/>/\&gt;/g' \
            | sed 's/`//g')

          # –§–æ—Ä–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
          TITLE="–ù–æ–≤–∏–π —Ä–µ–ª—ñ–∑ RaiderHub ($RELEASE_STATUS)"
          
          # –§–æ—Ä–º—É—î–º–æ –æ–ø–∏—Å, –≤–∫–ª—é—á–∞—é—á–∏ —Ç–µ–≥ —ñ —Ç–µ–∫—Å—Ç –∑–º—ñ–Ω.
          # –í–∞–∂–ª–∏–≤–æ, —â–æ –ø–µ—Ä–µ–Ω–æ—Å–∏ —Ä—è–¥–∫—ñ–≤ —É –∑–º—ñ–Ω–Ω—ñ–π DISCORD_BODY_CLEANED
          # –±—É–¥—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–æ–≤–∞–Ω—ñ jq.
          DESCRIPTION="**–ó–±—ñ—Ä–∫–∞:** \`${{ env.RELEASE_TAG }}\`\n\n**–ó–º—ñ–Ω–∏:**\n${DISCORD_BODY_CLEANED}\n\n[üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–µ–ª—ñ–∑](${{ env.RELEASE_URL }})"

          # –û–±–º–µ–∂—É—î–º–æ –æ–ø–∏—Å –¥–æ 4000 —Å–∏–º–≤–æ–ª—ñ–≤ (–ª—ñ–º—ñ—Ç Discord embed).
          DESCRIPTION_TRUNCATED=$(echo "$DESCRIPTION" | cut -c1-4000)

          # –°—Ç–≤–æ—Ä—é—î–º–æ JSON –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –∑ embed-–æ–º.
          # jq –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –µ–∫—Ä–∞–Ω—É—î –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏ —Ä—è–¥–∫—ñ–≤.
          JSON_PAYLOAD=$(jq -n \
            --arg title "$TITLE" \
            --arg description "$DESCRIPTION_TRUNCATED" \
            --arg url "${{ env.RELEASE_URL }}" \
            '{
              "embeds": [
                {
                  "title": $title,
                  "url": $url,
                  "description": $description,
                  "color": 5814783
                }
              ]
            }'
          )

          # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ JSON-–Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ Discord.
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "$JSON_PAYLOAD" \
            "${{ secrets.DISCORD_WEBHOOK_URL }}"
